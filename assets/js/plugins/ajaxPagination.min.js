(function ($) {
    $.fn.ajaxPagination = function (optionsOrMethod) {
        if (typeof optionsOrMethod === 'string') {
            const method = optionsOrMethod;
            const args = Array.prototype.slice.call(arguments, 1);
            const instance = this.data('ajaxPagination');

            if (instance && typeof instance[method] === 'function') {
                return instance[method].apply(instance, args);
            }
            return this;
        }

        const settings = defaultSet(optionsOrMethod);

        const table = this;
        const pgContainer = $('<div class="align-content-center margin-bottom"></div>').insertAfter(table);
        const pagination = $('<ul class="pagination"></ul>').appendTo(pgContainer);
            
        let currentPage = settings.currentPage;
        let totalRows = 0;

        function defaultSet(options){
            return $.extend({
                rowsPerPage: 5,
                currentPage: 1,
                ajax: function (page, callback) {},
                renderRow: function (row, index) {
                    if(!row){                        
                        return '<tr><td class="text-center">Empty!</td></tr>';
                    }else{
                        return '<tr><td>' + row.no + '</td></tr>';
                    }
                },
                onSuccess: function () {}
            }, options);
        }

        function renderPage(page) {
            settings.ajax(page, function (response) {
                const data = response.result || [];
                totalRows = response.total || 0;

                const tbody = table.find("tbody");
                tbody.empty();
                pgContainer.hide();
                // Hitung offset untuk nomor urut global
                const offset = (currentPage - 1) * settings.rowsPerPage;

                if(data.length > 0){
                    data.forEach((row, i) => {
                        // Global index: i + offset
                        tbody.append(settings.renderRow(row, i + offset));
                    });
                }else{
                    // tetap menampilkan renderRow jika data kosong
                    tbody.append(settings.renderRow());
                }

                settings.onSuccess.call(table, data);

                if(totalRows > settings.rowsPerPage){
                    pgContainer.show();                 
                    renderPagination(page);
                }
            });
        }

        function renderPagination(page) {
            const totalPages = Math.ceil(totalRows / settings.rowsPerPage);
            pagination.empty();

            if (totalPages <= 1) return;

            const maxVisible = 5;
            let startPage = Math.max(1, page - Math.floor(maxVisible / 2));
            let endPage = startPage + maxVisible - 1;

            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = Math.max(1, endPage - maxVisible + 1);
            }

            pagination.append(`<li><a href="#" class="prev">&laquo;</a></li>`);

            for (let i = startPage; i <= endPage; i++) {
                const active = (i === page) ? 'class="active"' : '';
                pagination.append(`<li><a href="#" ${active}>${i}</a></li>`);
            }

            pagination.append(`<li><a href="#" class="next">&raquo;</a></li>`);
        }

        pagination.on('click', 'a', function (e) {
            e.preventDefault();
            const text = $(this).text();
            const totalPages = Math.ceil(totalRows / settings.rowsPerPage);

            // Reset active class
            pagination.find('a').removeClass('active');
            
            if (text === '«') {
                currentPage = 1;
                // if (currentPage > 1) currentPage--;
            } else if (text === '»') {
                // if (currentPage < totalPages) currentPage++;
                currentPage = totalPages;
            } else {
                currentPage = parseInt(text);
            }

            $(this).parent('a').addClass('active'); // Add active to clicked page

            renderPage(currentPage);
        });

        this.data('ajaxPagination', {
            updateData: function (response, newPage) {
                const newData = response.result || [];
                const newTotal = response.total || 0;

                if (typeof newPage === 'number') currentPage = newPage;                
                else if (currentPage > Math.ceil(newTotal / settings.rowsPerPage)) currentPage = 1;

                totalRows = newTotal;

                const tbody = table.find("tbody");
                tbody.empty();

                newData.forEach((row, i) => {
                    tbody.append(settings.renderRow(row, i));
                });

                settings.onSuccess.call(table, newData);
                renderPagination(currentPage);
            },
            reload : function (options) {
                let settings = defaultSet(options),
                    currentPage = settings.currentPage, 
                    activePage = pagination.find('a.active');

                if(activePage.length > 0)
                    currentPage = parseInt(activePage.text());

                renderPage(currentPage);
            },
            destroy: function () {
                pgContainer.remove();
                table.removeData('ajaxPagination');
            }
        });
        renderPage(currentPage);
        return this;
    };
})(jQuery);
