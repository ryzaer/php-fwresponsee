/**
 * PLUGIN SIMPLE SELECT
 * 
 * Inisialisasi:
 * $('#mySelect').simpleSelect();
 * 
 * Trigger event:
 * $('#mySelect').val('1').trigger('change');
 * 
 * Destroy:
 * $('#mySelect').simpleSelect('destroy');
 * 
 * Reset :
 * $('#mySelect').simpleSelect('reset');
 * 
 * Contoh HTML:
 * <select id="mySelect" name="batik">
 *   <option value="">Pilih Batik</option>
 *   <option data-thumb="img1.webp" value="1">Motif 1</option>
 *   <option data-thumb="img2.webp" value="2">Motif 2</option>
 * </select>
 */
(function($) {
  $.fn.simpleSelect = function(methodOrOptions) {
    if (methods[methodOrOptions]) {
      return methods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
      return methods.init.apply(this, arguments);
    } else {
      $.error('Method ' + methodOrOptions + ' does not exist on simpleSelect');
    }
  };

  const methods = {
    init: function() {
      return this.each(function() {
        const $select = $(this);
        if ($select.data('simpleSelect-initialized')) return;

        // ... di dalam init each()
        const $wrapper = $('<div class="simple-select-wrapper"></div>');
        const selectedOption = $select.find('option:selected');
        const selectedLabel = selectedOption.text();
        const selectedThumb = selectedOption.data('thumb');
        const selectedValue = selectedOption.val();
        const $display = $('<div class="simple-selected" tabindex="0" role="button" aria-haspopup="listbox" aria-expanded="false"></div>');

        if (selectedThumb) {
          $display.html(`<img class="thumb" src="${selectedThumb}"> <span>${selectedLabel}</span>`);
        } else {
          $display.text(selectedLabel);
        }
        $display.data('typedChars', '');
        $display.data('lastTypedTime', 0);
        if (selectedValue) $display.addClass('has-value');

        const $options = $('<div class="simple-options" role="listbox" tabindex="-1"></div>');
        let currentIndex = -1;

        // build items (sama seperti sekarang)
        $select.find('option').each(function() {
          const $opt = $(this);
          const thumb = $opt.data('thumb');
          const label = $opt.text();
          const value = $opt.val();
          const $item = $('<div class="simple-option-item" role="option"></div>')
            .attr('data-value', value)
            .attr('data-label', label);

          if (thumb) $item.html(`<img class="thumb" src="${thumb}"> <span>${label}</span>`);
          else $item.text(label);

          if ($opt.is(':disabled')) $item.addClass('disabled').attr('aria-disabled', 'true');
          else $item.attr('aria-selected', 'false');

          $options.append($item);
        });

        $select.hide().after($wrapper);
        $wrapper.append($display).append($options);

        // helper to update disabled state UI
        function syncDisabledState() {
          if ($select.is(':disabled')) {
            $display.addClass('disabled').attr('tabindex', '-1').attr('aria-disabled', 'true');
            $options.hide();
            $display.attr('aria-expanded', 'false');
          } else {
            $display.removeClass('disabled').attr('tabindex', '0').removeAttr('aria-disabled');
          }
        }

        // initial sync (cover case select was disabled at init)
        syncDisabledState();

        // change handler (also handles disabled toggles)
        $select.off('change.simpleSelect').on('change.simpleSelect', function() {
          const sel = $select.find('option:selected');
          const value = sel.val();
          const label = sel.text();
          const thumb = sel.data('thumb');

          if (thumb) $display.html(`<img class="thumb" src="${thumb}"> <span>${label}</span>`);
          else $display.text(label);

          if (value) $display.addClass('has-value');
          else $display.removeClass('has-value');

          // update aria-selected on items
          $options.find('.simple-option-item').each(function() {
            const $it = $(this);
            $it.attr('aria-selected', $it.attr('data-value') === value ? 'true' : 'false');
          });

          // sync disabled state too (important for your trigger('change') use)
          syncDisabledState();
        });

        // click toggle - guard terhadap disabled
        $display.off('click.simpleSelect').on('click.simpleSelect', function() {
          if ($select.is(':disabled')) return; // <- guard
          const opened = $options.is(':visible');
          $options.toggle();
          $display.toggleClass('active');
          $display.attr('aria-expanded', opened ? 'false' : 'true');
          currentIndex = -1;
        });

        // klik item (sama tapi ok)
        $options.off('click.simpleSelect').on('click.simpleSelect', 'div:not(.disabled)', function() {
          const value = $(this).attr('data-value');
          const label = $(this).attr('data-label');
          const thumb = $(this).find('img.thumb').attr('src');

          if (thumb) $display.html(`<img class="thumb" src="${thumb}"> <span>${label}</span>`);
          else $display.text(label);

          if (value) $display.addClass('has-value');
          else $display.removeClass('has-value');

          // set select value -> trigger change will also sync disabled if caller changed it before trigger
          $select.val(value).trigger('change');
          $options.hide();
          $display.removeClass('active');
          $display.attr('aria-expanded', 'false');
          $display.data('typedChars', '');
        });


        // Close dropdown saat klik di luar
        $(document).on('mousedown.simpleSelect', function(e) {
          if (!$.contains($wrapper[0], e.target)) {
            $options.hide();
            $display.removeClass('active').data('typedChars', '');
          }
        });
        
        // Type-to-select + keyboard nav
        $display.off('keydown').on('keydown', function(e) {
          const items = $options.find('div:not(.disabled)');
          const now = Date.now();

          if (now - ($display.data('lastTypedTime') || 0) > 800) {
            $display.data('typedChars', '');
          }

          $display.data('lastTypedTime', now);
          let typedChars = $display.data('typedChars') || '';

          if (/^[a-zA-Z0-9 ]$/.test(e.key)) {
            typedChars += e.key.toLowerCase();
            $display.data('typedChars', typedChars);

            let matchedIndex = -1;
            items.each(function(i) {
              const text = $(this).text().trim().toLowerCase();
              if (text.startsWith(typedChars)) {
                matchedIndex = i;
                return false;
              }
            });

            if (matchedIndex >= 0) {
              currentIndex = matchedIndex;
              items.removeClass('hovered');
              const $match = items.eq(currentIndex).addClass('hovered');
              if ($match.length) {
                $match[0].scrollIntoView({ block: 'nearest' });
              }
              // Uncomment jika ingin pilih otomatis:
              $match.trigger('click');
            }
            return;
          }

          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            if (!$options.is(':visible')) {
              $options.show();
              $display.addClass('active');
            } else if (currentIndex >= 0) {
              items.eq(currentIndex).trigger('click');
            }
            $display.data('typedChars', '');
          } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            if (!$options.is(':visible')) {
              $options.show();
              $display.addClass('active');
            }
            currentIndex = (currentIndex + 1) % items.length;
            items.removeClass('hovered');
            items.eq(currentIndex).addClass('hovered')[0].scrollIntoView({ block: 'nearest' });
            $display.data('typedChars', '');
          } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            if (!$options.is(':visible')) {
              $options.show();
              $display.addClass('active');
            }
            currentIndex = (currentIndex - 1 + items.length) % items.length;
            items.removeClass('hovered');
            items.eq(currentIndex).addClass('hovered')[0].scrollIntoView({ block: 'nearest' });
            $display.data('typedChars', '');
          } else if (e.key === 'Escape') {
            e.preventDefault();
            $options.hide();
            $display.removeClass('active');
            $display.data('typedChars', '');
          }else if(e.key === 'Tab'){
            $options.hide();
          }
        });
        $select.data('simpleSelect-initialized', true);
      });
    },

    destroy: function() {
      return this.each(function() {
        const $select = $(this);
        const $wrapper = $select.next('.simple-select-wrapper');

        $select.off('.simpleSelect');
        $(document).off('click.simpleSelect');

        if ($wrapper.length) {
          $wrapper.remove();
          $select.show();
        }

        $select.removeData('simpleSelect-initialized');
      });
    },
    reset: function() {
      return this.each(function() {
        const $select = $(this);
        const $wrapper = $select.next('.simple-select-wrapper');
        const $display = $wrapper.find('.simple-selected');

        // Cari default option
        let $defaultOption = $select.find('option[selected]');
        if (!$defaultOption.length) {
          $defaultOption = $select.find('option:first');
        }

        // Set value di <select>
        $select.val($defaultOption.val());

        // Trigger change agar tampilan sinkron
        $select.trigger('change');

        // Reset typed chars
        $display.data('typedChars', '');
        $display.removeClass('active');

        // Pastikan dropdown tertutup
        $wrapper.find('.simple-options').hide();

      });
    },
    reload: function() {
      return this.each(function() {
          $(this).simpleSelect('destroy').simpleSelect();
      });
    }
  };
})(jQuery);
